import socket
import sys
import base64
import os
from typing import Tuple, Optional

class UDPClient:
    def __init__(self, server_host: str, server_port: int, file_list: str):
        """Initialize the UDP client with server details and file list"""
        self.server_host = server_host
        self.server_port = server_port
        self.file_list = file_list
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.client_socket.settimeout(1.0)  # Initial timeout in seconds
        self.max_retries = 5
        self.current_timeout = 1.0

    def send_and_receive(self, message: str, address: Tuple[str, int]) -> Optional[str]:
        """
        Send a message and wait for a response, handling timeouts and retries.
        Returns the response or None if failed after max retries.
        """
        retries = 0
        while retries < self.max_retries:
            try:
                # Send the message
                self.client_socket.sendto(message.encode(), address)
                # Wait for response
                data, _ = self.client_socket.recvfrom(4096)
                response = data.decode().strip()
                return response
            except socket.timeout:
                retries += 1
                self.current_timeout *= 2  # Exponential backoff
                self.client_socket.settimeout(self.current_timeout)
                print(f"Timeout, retrying ({retries}/{self.max_retries}), timeout: {self.current_timeout}s")
        print(f"Failed after {self.max_retries} retries")
        return None
    
    def download_file(self, filename: str, data_port: int) -> bool:
        """Download a single file from the server using the given data port"""
        print(f"Downloading {filename}...")
        file_size = None
        server_data_address = (self.server_host, data_port)

        try:
            with open(filename, 'wb') as f:
                start_byte = 0
                block_size = 1000
                while True:
                    end_byte = start_byte + block_size - 1
                    request = f"FILE {filename} GET START {start_byte} END {end_byte}"

                    response = self.send_and_receive(request, server_data_address)
                    if not response:
                        return False
                    
                    parts = response.split()
                    if parts[0] != "FILE" or parts[1] != filename or parts[2] != "OK":
                        print(f"Invalid response: {response}")
                        return False
                    
                    start = int(parts[4])
                    end = int(parts[6])
                    data_index = response.find("DATA") + 5
                    base64_data = response[data_index:].strip()

                    try:
                        file_data = base64.b64decode(base64_data)
                    except Exception as e:
                        print(f"Base64 decoding error: {e}")
                        return False
                    
                    f.seek(start)
                    f.write(file_data)
                    print("*", end="", flush=True)

                    if end >= file_size - 1:
                        break
                    
                    start_byte = end + 1

                    close_request = f"FILE {filename} CLOSE"
                close_response = self.send_and_receive(close_request, server_data_address)
                if not close_response or "CLOSE_OK" not in close_response:
                    print(f"Failed to close file: {close_response}")
                    return False
                
                print(f"\n{filename} downloaded successfully")
                return True
        except Exception as e:
            print(f"Error downloading {filename}: {e}")
            return False
        
    def run(self):
        """Run the client to download files from the server"""
        try:
            # Read file list
            with open(self.file_list, 'r') as f:
                filenames = [line.strip() for line in f if line.strip()]
            
            if not filenames:
                print("File list is empty")
                return
            
            # Process each file in the list
            for filename in filenames:
                # Send DOWNLOAD request
                download_request = f"DOWNLOAD {filename}"
                server_address = (self.server_host, self.server_port)
                response = self.send_and_receive(download_request, server_address)
                
                if not response:
                    print(f"Failed to request {filename}")
                    continue
                
                # Process response
                parts = response.split()
                if parts[0] == "OK" and parts[1] == filename:
                    # Extract file size and data port
                    try:
                        size_index = parts.index("SIZE")
                        port_index = parts.index("PORT")
                        file_size = int(parts[size_index + 1])
                        data_port = int(parts[port_index + 1])
                        print(f"File {filename} found, size: {file_size} bytes, data port: {data_port}")
                        
                        # Download the file
                        if not self.download_file(filename, data_port):
                            print(f"Failed to download {filename}")
                    except (ValueError, IndexError) as e:
                        print(f"Invalid OK response: {response}, error: {e}")
                elif parts[0] == "ERR" and parts[1] == filename and parts[2] == "NOT_FOUND":
                    print(f"File {filename} not found on server")
                else:
                    print(f"Unknown response: {response}")
        
        except Exception as e:
            print(f"Client error: {e}")
        finally:
            self.client_socket.close()

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python3 UDPclient.py <server_host> <server_port> <file_list>")
        sys.exit(1)
    
    server_host = sys.argv[1]
    server_port = int(sys.argv[2])
    file_list = sys.argv[3]
    
    client = UDPClient(server_host, server_port, file_list)
    client.run()