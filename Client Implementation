import socket
import sys
import base64
import os
from typing import Tuple, Optional

class UDPClient:
    def __init__(self, server_host: str, server_port: int, file_list: str):
        """Initialize the UDP client with server details and file list"""
        self.server_host = server_host
        self.server_port = server_port
        self.file_list = file_list
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.client_socket.settimeout(1.0)  # Initial timeout in seconds
        self.max_retries = 5
        self.current_timeout = 1.0

    def send_and_receive(self, message: str, address: Tuple[str, int]) -> Optional[str]:
        """
        Send a message and wait for a response, handling timeouts and retries.
        Returns the response or None if failed after max retries.
        """
        retries = 0
        while retries < self.max_retries:
            try:
                # Send the message
                self.client_socket.sendto(message.encode(), address)
                # Wait for response
                data, _ = self.client_socket.recvfrom(4096)
                response = data.decode().strip()
                return response
            except socket.timeout:
                retries += 1
                self.current_timeout *= 2  # Exponential backoff
                self.client_socket.settimeout(self.current_timeout)
                print(f"Timeout, retrying ({retries}/{self.max_retries}), timeout: {self.current_timeout}s")
        print(f"Failed after {self.max_retries} retries")
        return None
    
    def download_file(self, filename: str, data_port: int) -> bool:
        """Download a single file from the server using the given data port"""
        print(f"Downloading {filename}...")
        file_size = None
        server_data_address = (self.server_host, data_port)

        try:
            with open(filename, 'wb') as f:
                start_byte = 0
                block_size = 1000
                while True:
                    end_byte = start_byte + block_size - 1
                    request = f"FILE {filename} GET START {start_byte} END {end_byte}"

                    response = self.send_and_receive(request, server_data_address)
                    if not response:
                        return False
                    
                    parts = response.split()
                    if parts[0] != "FILE" or parts[1] != filename or parts[2] != "OK":
                        print(f"Invalid response: {response}")
                        return False
                    
                    start = int(parts[4])
                    end = int(parts[6])
                    data_index = response.find("DATA") + 5
                    base64_data = response[data_index:].strip()

                    