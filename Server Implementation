import socket
import sys
import os
import threading
import random
import base64
from typing import Tuple

class UDPServer:
    def __init__(self, server_port: int):
        """Initialize the UDP server with the specified port"""
        self.server_port = server_port
        self.welcome_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.welcome_socket.bind(('0.0.0.0', server_port))
        print(f"Server started on port {server_port}")
    
    def handle_client_request(self, request: str, client_address: Tuple[str, int]):
        """Handle an incoming client request for file download"""
        parts = request.split()
        if len(parts) >= 2 and parts[0] == "DOWNLOAD":
            filename = parts[1]
            print(f"Received download request for {filename} from {client_address}")
            
            # Check if file exists
            if not os.path.exists(filename):
                error_response = f"ERR {filename} NOT_FOUND"
                self.welcome_socket.sendto(error_response.encode(), client_address)
                print(f"File {filename} not found, sent error response")
                return
            
            # File exists, create new thread to handle data transmission
            file_size = os.path.getsize(filename)
            data_port = random.randint(50000, 51000)  # Choose random port for data
            
            # Send OK response with file size and data port
            ok_response = f"OK {filename} SIZE {file_size} PORT {data_port}"
            try:
                self.welcome_socket.sendto(ok_response.encode(), client_address)
                print(f"Sent OK response for {filename}, data port: {data_port}")
                
                # Start new thread to handle this client's data requests
                threading.Thread(
                    target=self.handle_file_transmission,
                    args=(filename, client_address, data_port)
                ).start()
            except Exception as e:
                print(f"Error sending OK response: {e}")
        else:
            print(f"Invalid request from {client_address}: {request}")