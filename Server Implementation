import socket
import sys
import os
import threading
import random
import base64
from typing import Tuple

class UDPServer:
    def __init__(self, server_port: int):
        """Initialize the UDP server with the specified port"""
        self.server_port = server_port
        self.welcome_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.welcome_socket.bind(('0.0.0.0', server_port))
        print(f"Server started on port {server_port}")
    
    def handle_client_request(self, request: str, client_address: Tuple[str, int]):
        """Handle an incoming client request for file download"""
        parts = request.split()
        if len(parts) >= 2 and parts[0] == "DOWNLOAD":
            filename = parts[1]
            print(f"Received download request for {filename} from {client_address}")
            
            # Check if file exists
            if not os.path.exists(filename):
                error_response = f"ERR {filename} NOT_FOUND"
                self.welcome_socket.sendto(error_response.encode(), client_address)
                print(f"File {filename} not found, sent error response")
                return
            
            # File exists, create new thread to handle data transmission
            file_size = os.path.getsize(filename)
            data_port = random.randint(50000, 51000)  # Choose random port for data
            
            # Send OK response with file size and data port
            ok_response = f"OK {filename} SIZE {file_size} PORT {data_port}"
            try:
                self.welcome_socket.sendto(ok_response.encode(), client_address)
                print(f"Sent OK response for {filename}, data port: {data_port}")
                
                # Start new thread to handle this client's data requests
                threading.Thread(
                    target=self.handle_file_transmission,
                    args=(filename, client_address, data_port)
                ).start()
            except Exception as e:
                print(f"Error sending OK response: {e}")
        else:
            print(f"Invalid request from {client_address}: {request}")

    def handle_file_transmission(self, filename: str, client_address: Tuple[str, int], data_port: int):
        """Handle data transmission for a specific client and file"""
        try:
            # Create new socket for data communication
            data_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            data_socket.bind(('0.0.0.0', data_port))
            data_socket.settimeout(5.0)  # Timeout for client inactivity
            print(f"Data thread started for {filename}, port: {data_port}")
            
            # Open file for reading
            with open(filename, 'rb') as f:
                file_size = os.path.getsize(filename)
                print(f"File {filename} opened, size: {file_size} bytes")
                
                # Loop to handle client data requests
                while True:
                    try:
                        # Wait for client request
                        request_data, _ = data_socket.recvfrom(4096)
                        request = request_data.decode().strip()
                        print(f"Received data request: {request} from {client_address}")
                        
                        parts = request.split()
                        if len(parts) >= 6 and parts[0] == "FILE" and parts[1] == filename:
                            if parts[2] == "GET":
                                # Handle data GET request
                                try:
                                    start = int(parts[4])
                                    end = int(parts[6])
                                    
                                    # Validate byte range
                                    if start < 0 or end >= file_size or start > end:
                                        print(f"Invalid byte range: {start}-{end}")
                                        continue
                                    
                                    # Read requested data block
                                    block_size = end - start + 1
                                    f.seek(start)
                                    file_data = f.read(block_size)
                                    
                                    # Encode data to Base64
                                    base64_data = base64.b64encode(file_data).decode()
                                    
                                    # Create response
                                    response = f"FILE {filename} OK START {start} END {end} DATA {base64_data}"
                                    data_socket.sendto(response.encode(), client_address)
                                    print(f"Sent data block {start}-{end} to {client_address}")
                                except (ValueError, IndexError) as e:
                                    print(f"Error processing GET request: {e}")
                            elif parts[2] == "CLOSE":
                                # Handle close request
                                close_response = f"FILE {filename} CLOSE_OK"
                                data_socket.sendto(close_response.encode(), client_address)
                                print(f"Sent CLOSE_OK to {client_address}, closing thread for {filename}")
                                break
                        else:
                            print(f"Invalid data request: {request}")
                    except socket.timeout:
                        # Timeout, assume client is done or disconnected
                        print(f"Timeout waiting for client {client_address}, closing thread for {filename}")
                        break
        except Exception as e:
            print(f"Error in data transmission thread for {filename}: {e}")
        finally:
            # Clean up
            try:
                data_socket.close()
                print(f"Data socket closed for {filename}")
            except:
                pass